apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco-android'

android {
  compileSdkVersion 28
  defaultConfig {
    applicationId "com.wdb.breta.weatherdbk"
    minSdkVersion 23
    targetSdkVersion 28
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
  flavorDimensions "networkEnv"
  productFlavors {
    stub {
      applicationId "com.wdb.breta.weatherdbk.stub"
      buildConfigField "String", "GATEWAY_BASE_ENDPOINT", "\"http://api.openweathermap.org/data/2.5/\""
      buildConfigField "String", "WEATHER_API_KEY", "\"61e50c217f20d201d017099e7f758c8d\""
      dimension = "networkEnv"
    }
    dev {
      applicationId "com.wdb.breta.weatherdbk"
      buildConfigField "String", "GATEWAY_BASE_ENDPOINT", "\"http://api.openweathermap.org/data/2.5/\""
      buildConfigField "String", "WEATHER_API_KEY", "\"61e50c217f20d201d017099e7f758c8d\""
      dimension = "networkEnv"
    }
  }
  testOptions {
    unitTests.returnDefaultValues = true
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation 'com.android.support:appcompat-v7:28.0.0'
  implementation 'com.android.support.constraint:constraint-layout:1.1.3'
  testImplementation 'junit:junit:4.12'
  androidTestImplementation 'com.android.support.test:runner:1.0.2'
  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

  //Architecture Components
  def archCompVersion = '1.1.1'
  implementation "android.arch.lifecycle:runtime:$archCompVersion"
  implementation "android.arch.lifecycle:extensions:$archCompVersion"
  implementation "android.arch.lifecycle:reactivestreams:$archCompVersion"

  // RxJava & RxAndroid
  implementation 'io.reactivex.rxjava2:rxjava:2.2.4'
  implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'

  //Retrofit
  implementation 'com.squareup.retrofit2:retrofit:2.5.0'
  implementation "com.squareup.retrofit2:adapter-rxjava2:2.3.0"

  //okhttp3
  implementation 'com.squareup.okhttp3:okhttp:3.12.0'
  implementation "com.squareup.okhttp3:logging-interceptor:3.10.0"

  // Moshi
  implementation 'com.squareup.retrofit2:converter-moshi:2.3.0'
  implementation 'com.squareup.moshi:moshi-kotlin:1.5.0'

  // Glide
  implementation 'com.github.bumptech.glide:glide:4.7.1'
  annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'

  // Timber
  implementation 'com.jakewharton.timber:timber:4.7.0'

  // Dagger version
  def daggerVersion = '2.16'

  // Dagger 2
  kapt "com.google.dagger:dagger-compiler:$daggerVersion"
  kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
  implementation "com.google.dagger:dagger:$daggerVersion"
  implementation "com.google.dagger:dagger-android:$daggerVersion"
  implementation "com.google.dagger:dagger-android-support:$daggerVersion"

  //GoogleMapApi
  implementation "com.google.android.gms:play-services-location:16.0.0"

  //ThreeTenADP
  implementation "com.jakewharton.threetenabp:threetenabp:1.1.1"

  // Test
  testImplementation 'junit:junit:4.12'
  testImplementation "org.mockito:mockito-core:2.23.4"
  androidTestImplementation 'com.android.support.test:runner:1.0.2'
  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
  implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.10'
  testImplementation "android.arch.core:core-testing:1.1.1"
}

project.afterEvaluate {
  //Gather build type and product flavor names in a list
  def buildTypes = android.buildTypes.collect { type -> type.name }
  def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
  if (!productFlavors) productFlavors.add('')

  productFlavors.each { productFlavorName ->
    buildTypes.each { buildTypeName ->

      //Define the sourceName and the sourcePath.
      def sourceName, sourcePath
      if (!productFlavorName) {
        sourceName = sourcePath = "${buildTypeName}"
      } else {
        sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
        sourcePath = "${productFlavorName}/${buildTypeName}"
      }

      def testTaskName = "test${sourceName.capitalize()}UnitTest"

      task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

        group = "Reporting"
        description =
          "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

        reports {
          xml.enabled true
          html.enabled true
        }

        //Directory where the compiled class files are
        classDirectories =
          fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}",
            excludes: ['**/R.class',
                       '**/BR.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$ViewBinder*.*',
                       '**/BuildConfig.*',
                       'android/**',
                       '**/Manifest*.*',
                       '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                       '**/*Module.*', // Modules for Dagger.
                       '**/*Dagger*.*', // Dagger auto-generated code.
                       '**/*MembersInjector*.*', // Dagger auto-generated code.
                       '**/*_Provide*Factory*.*',
                       '**/*_Factory.*', //Dagger auto-generated code
                       '**/*$*$*.*' // Anonymous classes generated by kotlin
            ])

        sourceDirectories = files(["src/main/kotlin",
                                   "src/$productFlavorName/kotlin",
                                   "src/$buildTypeName/kotlin"])

        executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
      }
    }
  }
}
